/*
 * gcode.h
 *
 *  Created on: 16 Sep 2016
 *      Author: Alex
 */

#ifndef INC_GCODE_H_
#define INC_GCODE_H_

#include <stdint.h>
#include <stdbool.h>

enum
{
	GCODE_MOVEMENT_RAPID 		= 0,
	GCODE_MOVEMENT_CONTROLLED 	= 1,
	GCODE_WAIT					= 4,
	GCODE_SET_UNITS_INCH		= 20,
	GCODE_SET_UNITS_MM			= 21,
	GCODE_HOME					= 28,
	GCODE_POSITIONING_ABSOLUTE	= 90,
	GCODE_POSITIONING_RELATIVE	= 91,
	GCODE_SET_POSITION			= 92,
}GCODE_general;

enum
{
	GCODE_STOP_WHEN_READY					= 0,	// stop when buffer is empty
	GCODE_MOTORS_ENABLE						= 17,
	GCODE_MOTORS_DISABLE					= 18,
	GCODE_FILESYSTEM_LIST_CUR_DIR			= 20,
	GCODE_FILESYSTEM_MOUNT					= 21,
	GCODE_FILESYSTEM_UNMOUNT				= 22,
	GCODE_FILESYSTEM_FILE_SELECT			= 23,
	GCODE_PRINT_START_RESUME				= 24,
	GCODE_PRINT_PAUSE						= 25,
	GCODE_FILE_SET_POSITION_BYTES			= 26,
	GCODE_PRINT_REPORT_STATUS				= 27,
	GCODE_FILESYSTEM_WRITE_FILE				= 28,
	GCODE_FILESYSTEM_STOP_WRITE_FILE		= 29,
	GCODE_PRINT_EJECT						= 40,
	GCODE_LOOP_PROGRAM						= 41,	// stop with reset button
	GCODE_STOP_IF_NO_MATERIAL				= 42,
	GCODE_STOP_IF_NO_MATERIAL_HEATBED_ON	= 43,
	GCODE_POWER_SUPPLY_ON					= 80,
	GCODE_POWER_SUPPLY_OFF					= 81,
	GCODE_STOP_IDLE_HOLD					= 84,	// Do not use whilst printing
	GCODE_SET_STEPS_PER_UNIT				= 92,
	GCODE_EXTRUDER_1_FORWARD				= 101,	// Deprecated
	GCODE_EXTRUDER_1_REVERSE				= 102,	// Deprecated
	GCODE_EXTRUDER_TURN_ALL_OFF				= 103,
	GCODE_EXTRUDER_SET_TEMPERATURE			= 104,
	GCODE_EXTRUDER_GET_TEMPERATURE			= 105,
	GCODE_FAN_SET_SPEED						= 106,
	GCODE_FAN_OFF							= 107,
	GCODE_EXTRUDER_SET_SPEED				= 108,	// Deprecated
	GCODE_EXTRUDER_SET_TEMPERATURE_WAITING	= 109,
	GCDOE_SET_CURRENT_LINE_NUMBER			= 110,
	GCODE_SET_DEBUG_LEVEL					= 111,
	GCODE_STOP_EMERGENCY					= 112,
	GCODE_EXTRUDER_SET_PWM					= 113,
	GCODE_GET_CURRENT_POSITION				= 114,
	GCODE_GET_FIRMWARE_VERSION				= 115,
	GCODE_WAIT_FOR_ALL_TEMPERATURES			= 116,
	GCODE_GET_ZERO_POSITION_IN_STEPS		= 117,
	GCODE_GET_STATUS_ENDSTOPS				= 119,
	GCODE_EXTRUDER_VALVE_OPEN				= 126,
	GCODE_EXTRUDER_VALVE_CLOSE				= 127,
	GCODE_EXTRUDER_PRESSURE_SET				= 128,
	GCODE_EXTRUDER_PRESSURE_OFF 			= 129,
	GCODE_HEATED_BED_SET_TEMPERATURE		= 140,
	GCODE_HEATED_CHAMBER_SET_TEMPERATURE	= 141,
	GCODE_SET_HOLDING_PRESSURE				= 142,
	GCODE_SET_HOTEND_MAX_TEMPERATURE		= 143,
	GCODE_SET_EXTRUDER_MATERIALS_COUNT		= 160,
	GCODE_SET_OFFSET_Z						= 203,
	GCODE_AUTO_REVERSE_AND_PRIME_DISABLE	= 228,
	GCODE_AUTO_REVERSE_AND_PRIME_ENABLE		= 229,
	GCODE_WAIT_FOR_TEMPERATURE_SET			= 230,
	GCODE_CONVERYOR_BELT_START				= 240,
	GCODE_CONVEYOR_BELT_STOP				= 241,
	GCODE_COOLER_FAN_START					= 245,
	GCODE_COOLER_FAN_STOP					= 246,
	GCODE_GENERATE_BEEP						= 300,
}GCODE_machine;

typedef struct
{
	char 	type;			// 'G' or 'M' code
	uint16_t	number;			// command number

	uint8_t *optionalData;	// potential command
	uint8_t optionalLen;	// length of the potential command
}GCODE;

/* This is a definition for a gcode function pointer. This is used to create
 * an array which we can use to look up a function to handle a specific gcode
 * command
 */
typedef bool (*gcode_function_type)(GCODE *data);

extern gcode_function_type mCommands[];

#endif /* INC_GCODE_H_ */
